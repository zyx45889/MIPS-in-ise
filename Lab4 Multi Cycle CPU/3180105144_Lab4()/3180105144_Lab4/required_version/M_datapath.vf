////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : M_datapath.vf
// /___/   /\     Timestamp : 06/21/2020 12:01:43
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family kintex7 -verilog C:/Users/86133/Desktop/ise/MCPU/M_datapath.vf -w C:/Users/86133/Desktop/ise/MCPU/M_datapath.sch
//Design Name: M_datapath
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module M_datapath(ALUSrcA, 
                  ALUSrcB, 
                  ALU_operation, 
                  Branch, 
                  clk, 
                  data2CPU, 
                  IorD, 
                  IRWrite, 
                  MemtoReg, 
                  MIO_ready, 
                  PCSource, 
                  PCWrite, 
                  PCWriteCond, 
                  RegDst, 
                  RegWrite, 
                  reset, 
                  data_out, 
                  Inst, 
                  M_addr, 
                  PC_Current, 
                  zero);

    input ALUSrcA;
    input [1:0] ALUSrcB;
    input [2:0] ALU_operation;
    input Branch;
    input clk;
    input [31:0] data2CPU;
    input IorD;
    input IRWrite;
    input [1:0] MemtoReg;
    input MIO_ready;
    input [1:0] PCSource;
    input PCWrite;
    input PCWriteCond;
    input [1:0] RegDst;
    input RegWrite;
    input reset;
   output [31:0] data_out;
   output [31:0] Inst;
   output [31:0] M_addr;
   output [31:0] PC_Current;
   output zero;
   
   wire [31:0] A;
   wire [31:0] ALU;
   wire [31:0] B;
   wire [31:0] Lui;
   wire NO;
   wire [31:0] offset;
   wire V5;
   wire [31:0] XLXN_32;
   wire [4:0] XLXN_37;
   wire [31:0] XLXN_38;
   wire [31:0] XLXN_39;
   wire [31:0] XLXN_43;
   wire [31:0] XLXN_59;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_66;
   wire XLXN_76;
   wire [31:0] XLXN_77;
   wire [31:0] PC_Current_DUMMY;
   wire zero_DUMMY;
   wire [31:0] Inst_DUMMY;
   wire [31:0] data_out_DUMMY;
   
   assign data_out[31:0] = data_out_DUMMY[31:0];
   assign Inst[31:0] = Inst_DUMMY[31:0];
   assign PC_Current[31:0] = PC_Current_DUMMY[31:0];
   assign zero = zero_DUMMY;
   REG32  XLXI_1 (.CE(IRWrite), 
                 .clk(clk), 
                 .D(data2CPU[31:0]), 
                 .rst(reset), 
                 .Q(Inst_DUMMY[31:0]));
   REG32  XLXI_2 (.CE(V5), 
                 .clk(clk), 
                 .D(data2CPU[31:0]), 
                 .rst(NO), 
                 .Q(XLXN_32[31:0]));
   MUX4T1_32  XLXI_3 (.A0(XLXN_59[31:0]), 
                     .A1(XLXN_32[31:0]), 
                     .A2(Lui[31:0]), 
                     .A3(PC_Current_DUMMY[31:0]), 
                     .S(MemtoReg[1:0]), 
                     .C(XLXN_38[31:0]));
   MUX4T1_5  XLXI_4 (.A0(Inst_DUMMY[20:16]), 
                    .A1(Inst_DUMMY[15:11]), 
                    .A2({V5, V5, V5, V5, V5}), 
                    .A3(), 
                    .S(RegDst[1:0]), 
                    .C(XLXN_37[4:0]));
   Regfile  XLXI_5 (.clk(clk), 
                   .datain(XLXN_38[31:0]), 
                   .Des(XLXN_37[4:0]), 
                   .RN1(Inst_DUMMY[25:21]), 
                   .RN2(Inst_DUMMY[20:16]), 
                   .rst(reset), 
                   .Wreg(RegWrite), 
                   .A(XLXN_39[31:0]), 
                   .B(data_out_DUMMY[31:0]));
   MUX2T1_32  XLXI_6 (.A(PC_Current_DUMMY[31:0]), 
                     .B(XLXN_39[31:0]), 
                     .S(ALUSrcA), 
                     .C(A[31:0]));
   MUX4T1_32  XLXI_7 (.A0(data_out_DUMMY[31:0]), 
                     .A1({NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, 
         NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, V5, 
         NO, NO}), 
                     .A2(XLXN_43[31:0]), 
                     .A3(offset[31:0]), 
                     .S(ALUSrcB[1:0]), 
                     .C(B[31:0]));
   ALUSCPU  XLXI_8 (.A(A[31:0]), 
                   .B(B[31:0]), 
                   .op(ALU_operation[2:0]), 
                   .C(ALU[31:0]), 
                   .result1(), 
                   .S(), 
                   .zero(zero_DUMMY));
   REG32  XLXI_9 (.CE(V5), 
                 .clk(clk), 
                 .D(ALU[31:0]), 
                 .rst(NO), 
                 .Q(XLXN_59[31:0]));
   MUX2T1_32  XLXI_10 (.A(PC_Current_DUMMY[31:0]), 
                      .B(XLXN_59[31:0]), 
                      .S(IorD), 
                      .C(M_addr[31:0]));
   REG32  XLXI_11 (.CE(XLXN_76), 
                  .clk(clk), 
                  .D(XLXN_77[31:0]), 
                  .rst(reset), 
                  .Q(PC_Current_DUMMY[31:0]));
   VCC  XLXI_40 (.P(V5));
   GND  XLXI_41 (.G(NO));
   Ext_32  XLXI_42 (.imm_16(Inst_DUMMY[15:0]), 
                   .imm_32(XLXN_43[31:0]));
   MUX4T1_32  XLXI_43 (.A0(ALU[31:0]), 
                      .A1(XLXN_59[31:0]), 
                      .A2({PC_Current_DUMMY[31:28], Inst_DUMMY[25:0], NO, NO}), 
                      .A3(XLXN_59[31:0]), 
                      .S(PCSource[1:0]), 
                      .C(XLXN_77[31:0]));
   AND2  XLXI_44 (.I0(zero_DUMMY), 
                 .I1(Branch), 
                 .O(XLXN_64));
   AND2  XLXI_45 (.I0(XLXN_64), 
                 .I1(PCWriteCond), 
                 .O(XLXN_65));
   OR2  XLXI_46 (.I0(XLXN_65), 
                .I1(PCWrite), 
                .O(XLXN_66));
   AND2  XLXI_47 (.I0(XLXN_66), 
                 .I1(MIO_ready), 
                 .O(XLXN_76));
endmodule
